// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.ChangeDetails;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.Count;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.Create;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.Item;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.Oldformat;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.Parent;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.Substatus;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job.Timeline;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.Job {
    /// <summary>
    /// Builds and executes requests for operations under \api2\ServiceProvider\Job
    /// </summary>
    public class JobRequestBuilder : BaseRequestBuilder {
        /// <summary>The ChangeDetails property</summary>
        public ChangeDetailsRequestBuilder ChangeDetails { get =>
            new ChangeDetailsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The count property</summary>
        public CountRequestBuilder Count { get =>
            new CountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The create property</summary>
        public CreateRequestBuilder Create { get =>
            new CreateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The oldformat property</summary>
        public OldformatRequestBuilder Oldformat { get =>
            new OldformatRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The parent property</summary>
        public ParentRequestBuilder Parent { get =>
            new ParentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The substatus property</summary>
        public SubstatusRequestBuilder Substatus { get =>
            new SubstatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The timeline property</summary>
        public TimelineRequestBuilder Timeline { get =>
            new TimelineRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Qwips.SmartService.ServiceProvider.ClientSdk.api2.ServiceProvider.Job.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        public WithJobItemRequestBuilder this[int position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("jobId", position);
            return new WithJobItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>Gets an item from the Qwips.SmartService.ServiceProvider.ClientSdk.api2.ServiceProvider.Job.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public WithJobItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("jobId", position);
            return new WithJobItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new JobRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JobRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api2/ServiceProvider/Job", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new JobRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JobRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api2/ServiceProvider/Job", rawUrl) {
        }
    }
}
