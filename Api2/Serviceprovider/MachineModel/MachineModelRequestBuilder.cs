// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.MachineModel.CommonParts;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.MachineModel.Filtered;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.MachineModel.Item;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.MachineModel.Modelarticle;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.MachineModel.Overview;
using Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.MachineModel.SetImage;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Api2.Serviceprovider.MachineModel {
    /// <summary>
    /// Builds and executes requests for operations under \api2\ServiceProvider\MachineModel
    /// </summary>
    public class MachineModelRequestBuilder : BaseRequestBuilder {
        /// <summary>The CommonParts property</summary>
        public CommonPartsRequestBuilder CommonParts { get =>
            new CommonPartsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The filtered property</summary>
        public FilteredRequestBuilder Filtered { get =>
            new FilteredRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The modelarticle property</summary>
        public ModelarticleRequestBuilder Modelarticle { get =>
            new ModelarticleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The overview property</summary>
        public OverviewRequestBuilder Overview { get =>
            new OverviewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The setImage property</summary>
        public SetImageRequestBuilder SetImage { get =>
            new SetImageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Qwips.SmartService.ServiceProvider.ClientSdk.api2.ServiceProvider.MachineModel.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        public MachineModelItemRequestBuilder this[int position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("id", position);
            return new MachineModelItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>Gets an item from the Qwips.SmartService.ServiceProvider.ClientSdk.api2.ServiceProvider.MachineModel.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public MachineModelItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("id", position);
            return new MachineModelItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new MachineModelRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MachineModelRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api2/ServiceProvider/MachineModel", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new MachineModelRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MachineModelRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api2/ServiceProvider/MachineModel", rawUrl) {
        }
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<MachineModelRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<MachineModelRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken);
        }
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<MachineModelRequestBuilderGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<MachineModelRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new MachineModelRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public MachineModelRequestBuilder WithUrl(string rawUrl) {
            return new MachineModelRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class MachineModelRequestBuilderGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>
            /// Instantiates a new MachineModelRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public MachineModelRequestBuilderGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}
