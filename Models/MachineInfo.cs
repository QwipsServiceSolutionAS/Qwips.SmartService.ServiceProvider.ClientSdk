// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class MachineInfo : IParsable {
        /// <summary>The AssetType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AssetTypeDto? AssetType { get; set; }
#nullable restore
#else
        public AssetTypeDto AssetType { get; set; }
#endif
        /// <summary>The AssetTypeId property</summary>
        public int? AssetTypeId { get; set; }
        /// <summary>The BoughtDate property</summary>
        public DateTimeOffset? BoughtDate { get; set; }
        /// <summary>The ClosedJobs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MinimalJobNavigationModel>? ClosedJobs { get; set; }
#nullable restore
#else
        public List<MinimalJobNavigationModel> ClosedJobs { get; set; }
#endif
        /// <summary>The ContractAgreement property</summary>
        public bool? ContractAgreement { get; set; }
        /// <summary>The CustomerAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerAddress { get; set; }
#nullable restore
#else
        public string CustomerAddress { get; set; }
#endif
        /// <summary>The CustomerAgreement property</summary>
        public bool? CustomerAgreement { get; set; }
        /// <summary>The CustomerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>The CustomerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerName { get; set; }
#nullable restore
#else
        public string CustomerName { get; set; }
#endif
        /// <summary>The DisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The ExtRef1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExtRef1 { get; set; }
#nullable restore
#else
        public string ExtRef1 { get; set; }
#endif
        /// <summary>The Facility property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Facility { get; set; }
#nullable restore
#else
        public string Facility { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The InstallationDate property</summary>
        public DateTimeOffset? InstallationDate { get; set; }
        /// <summary>The IsActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The LastJobFlag property</summary>
        public int? LastJobFlag { get; set; }
        /// <summary>The MachineModelId property</summary>
        public int? MachineModelId { get; set; }
        /// <summary>The MachineModelName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineModelName { get; set; }
#nullable restore
#else
        public string MachineModelName { get; set; }
#endif
        /// <summary>The MachineTypeName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineTypeName { get; set; }
#nullable restore
#else
        public string MachineTypeName { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Note property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The OpenJobs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MinimalJobNavigationModel>? OpenJobs { get; set; }
#nullable restore
#else
        public List<MinimalJobNavigationModel> OpenJobs { get; set; }
#endif
        /// <summary>The QRCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? QRCode { get; set; }
#nullable restore
#else
        public string QRCode { get; set; }
#endif
        /// <summary>The RetiredDate property</summary>
        public DateTimeOffset? RetiredDate { get; set; }
        /// <summary>The SerialNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>The ServiceAgreement property</summary>
        public bool? ServiceAgreement { get; set; }
        /// <summary>The ServiceAgreementNextDate property</summary>
        public DateTimeOffset? ServiceAgreementNextDate { get; set; }
        /// <summary>The SupplierId property</summary>
        public int? SupplierId { get; set; }
        /// <summary>The SupplierName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupplierName { get; set; }
#nullable restore
#else
        public string SupplierName { get; set; }
#endif
        /// <summary>The UpcomingJobs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MinimalJobNavigationModel>? UpcomingJobs { get; set; }
#nullable restore
#else
        public List<MinimalJobNavigationModel> UpcomingJobs { get; set; }
#endif
        /// <summary>The WarrantyExpiresDate property</summary>
        public DateTimeOffset? WarrantyExpiresDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MachineInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MachineInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AssetType", n => { AssetType = n.GetObjectValue<AssetTypeDto>(AssetTypeDto.CreateFromDiscriminatorValue); } },
                {"AssetTypeId", n => { AssetTypeId = n.GetIntValue(); } },
                {"BoughtDate", n => { BoughtDate = n.GetDateTimeOffsetValue(); } },
                {"ClosedJobs", n => { ClosedJobs = n.GetCollectionOfObjectValues<MinimalJobNavigationModel>(MinimalJobNavigationModel.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ContractAgreement", n => { ContractAgreement = n.GetBoolValue(); } },
                {"CustomerAddress", n => { CustomerAddress = n.GetStringValue(); } },
                {"CustomerAgreement", n => { CustomerAgreement = n.GetBoolValue(); } },
                {"CustomerId", n => { CustomerId = n.GetStringValue(); } },
                {"CustomerName", n => { CustomerName = n.GetStringValue(); } },
                {"DisplayName", n => { DisplayName = n.GetStringValue(); } },
                {"ExtRef1", n => { ExtRef1 = n.GetStringValue(); } },
                {"Facility", n => { Facility = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"InstallationDate", n => { InstallationDate = n.GetDateTimeOffsetValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"LastJobFlag", n => { LastJobFlag = n.GetIntValue(); } },
                {"MachineModelId", n => { MachineModelId = n.GetIntValue(); } },
                {"MachineModelName", n => { MachineModelName = n.GetStringValue(); } },
                {"MachineTypeName", n => { MachineTypeName = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"Note", n => { Note = n.GetStringValue(); } },
                {"OpenJobs", n => { OpenJobs = n.GetCollectionOfObjectValues<MinimalJobNavigationModel>(MinimalJobNavigationModel.CreateFromDiscriminatorValue)?.ToList(); } },
                {"QRCode", n => { QRCode = n.GetStringValue(); } },
                {"RetiredDate", n => { RetiredDate = n.GetDateTimeOffsetValue(); } },
                {"SerialNumber", n => { SerialNumber = n.GetStringValue(); } },
                {"ServiceAgreement", n => { ServiceAgreement = n.GetBoolValue(); } },
                {"ServiceAgreementNextDate", n => { ServiceAgreementNextDate = n.GetDateTimeOffsetValue(); } },
                {"SupplierId", n => { SupplierId = n.GetIntValue(); } },
                {"SupplierName", n => { SupplierName = n.GetStringValue(); } },
                {"UpcomingJobs", n => { UpcomingJobs = n.GetCollectionOfObjectValues<MinimalJobNavigationModel>(MinimalJobNavigationModel.CreateFromDiscriminatorValue)?.ToList(); } },
                {"WarrantyExpiresDate", n => { WarrantyExpiresDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AssetTypeDto>("AssetType", AssetType);
            writer.WriteIntValue("AssetTypeId", AssetTypeId);
            writer.WriteDateTimeOffsetValue("BoughtDate", BoughtDate);
            writer.WriteCollectionOfObjectValues<MinimalJobNavigationModel>("ClosedJobs", ClosedJobs);
            writer.WriteBoolValue("ContractAgreement", ContractAgreement);
            writer.WriteStringValue("CustomerAddress", CustomerAddress);
            writer.WriteBoolValue("CustomerAgreement", CustomerAgreement);
            writer.WriteStringValue("CustomerId", CustomerId);
            writer.WriteStringValue("CustomerName", CustomerName);
            writer.WriteStringValue("DisplayName", DisplayName);
            writer.WriteStringValue("ExtRef1", ExtRef1);
            writer.WriteStringValue("Facility", Facility);
            writer.WriteIntValue("Id", Id);
            writer.WriteDateTimeOffsetValue("InstallationDate", InstallationDate);
            writer.WriteBoolValue("IsActive", IsActive);
            writer.WriteIntValue("LastJobFlag", LastJobFlag);
            writer.WriteIntValue("MachineModelId", MachineModelId);
            writer.WriteStringValue("MachineModelName", MachineModelName);
            writer.WriteStringValue("MachineTypeName", MachineTypeName);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("Note", Note);
            writer.WriteCollectionOfObjectValues<MinimalJobNavigationModel>("OpenJobs", OpenJobs);
            writer.WriteStringValue("QRCode", QRCode);
            writer.WriteDateTimeOffsetValue("RetiredDate", RetiredDate);
            writer.WriteStringValue("SerialNumber", SerialNumber);
            writer.WriteBoolValue("ServiceAgreement", ServiceAgreement);
            writer.WriteDateTimeOffsetValue("ServiceAgreementNextDate", ServiceAgreementNextDate);
            writer.WriteIntValue("SupplierId", SupplierId);
            writer.WriteStringValue("SupplierName", SupplierName);
            writer.WriteCollectionOfObjectValues<MinimalJobNavigationModel>("UpcomingJobs", UpcomingJobs);
            writer.WriteDateTimeOffsetValue("WarrantyExpiresDate", WarrantyExpiresDate);
        }
    }
}
