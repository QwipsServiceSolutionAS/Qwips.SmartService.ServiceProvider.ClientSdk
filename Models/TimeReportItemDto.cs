// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class TimeReportItemDto : IParsable {
        /// <summary>The Activity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Activity { get; set; }
#nullable restore
#else
        public string Activity { get; set; }
#endif
        /// <summary>The Customer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>The CustomerId property</summary>
        public int? CustomerId { get; set; }
        /// <summary>The Date property</summary>
        public DateTimeOffset? Date { get; set; }
        /// <summary>The Description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The Employee property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Employee { get; set; }
#nullable restore
#else
        public string Employee { get; set; }
#endif
        /// <summary>The EmployeeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmployeeId { get; set; }
#nullable restore
#else
        public string EmployeeId { get; set; }
#endif
        /// <summary>The Hours property</summary>
        public double? Hours { get; set; }
        /// <summary>The Machine property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Machine { get; set; }
#nullable restore
#else
        public string Machine { get; set; }
#endif
        /// <summary>The TimeReportStartTime property</summary>
        public DateTimeOffset? TimeReportStartTime { get; set; }
        /// <summary>The TimeReportStopTime property</summary>
        public DateTimeOffset? TimeReportStopTime { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TimeReportItemDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TimeReportItemDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Activity", n => { Activity = n.GetStringValue(); } },
                {"Customer", n => { Customer = n.GetStringValue(); } },
                {"CustomerId", n => { CustomerId = n.GetIntValue(); } },
                {"Date", n => { Date = n.GetDateTimeOffsetValue(); } },
                {"Description", n => { Description = n.GetStringValue(); } },
                {"Employee", n => { Employee = n.GetStringValue(); } },
                {"EmployeeId", n => { EmployeeId = n.GetStringValue(); } },
                {"Hours", n => { Hours = n.GetDoubleValue(); } },
                {"Machine", n => { Machine = n.GetStringValue(); } },
                {"TimeReportStartTime", n => { TimeReportStartTime = n.GetDateTimeOffsetValue(); } },
                {"TimeReportStopTime", n => { TimeReportStopTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Activity", Activity);
            writer.WriteStringValue("Customer", Customer);
            writer.WriteIntValue("CustomerId", CustomerId);
            writer.WriteDateTimeOffsetValue("Date", Date);
            writer.WriteStringValue("Description", Description);
            writer.WriteStringValue("Employee", Employee);
            writer.WriteStringValue("EmployeeId", EmployeeId);
            writer.WriteDoubleValue("Hours", Hours);
            writer.WriteStringValue("Machine", Machine);
            writer.WriteDateTimeOffsetValue("TimeReportStartTime", TimeReportStartTime);
            writer.WriteDateTimeOffsetValue("TimeReportStopTime", TimeReportStopTime);
        }
    }
}
