// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class ConstructorInfo : IParsable {
        /// <summary>The Attributes property</summary>
        public int? Attributes { get; set; }
        /// <summary>The CallingConvention property</summary>
        public int? CallingConvention { get; set; }
        /// <summary>The ContainsGenericParameters property</summary>
        public bool? ContainsGenericParameters { get; private set; }
        /// <summary>The CustomAttributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CustomAttributeData>? CustomAttributes { get; private set; }
#nullable restore
#else
        public List<CustomAttributeData> CustomAttributes { get; private set; }
#endif
        /// <summary>The DeclaringType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TypeObject? DeclaringType { get; set; }
#nullable restore
#else
        public TypeObject DeclaringType { get; set; }
#endif
        /// <summary>The IsAbstract property</summary>
        public bool? IsAbstract { get; private set; }
        /// <summary>The IsAssembly property</summary>
        public bool? IsAssembly { get; private set; }
        /// <summary>The IsConstructor property</summary>
        public bool? IsConstructor { get; private set; }
        /// <summary>The IsFamily property</summary>
        public bool? IsFamily { get; private set; }
        /// <summary>The IsFamilyAndAssembly property</summary>
        public bool? IsFamilyAndAssembly { get; private set; }
        /// <summary>The IsFamilyOrAssembly property</summary>
        public bool? IsFamilyOrAssembly { get; private set; }
        /// <summary>The IsFinal property</summary>
        public bool? IsFinal { get; private set; }
        /// <summary>The IsGenericMethod property</summary>
        public bool? IsGenericMethod { get; private set; }
        /// <summary>The IsGenericMethodDefinition property</summary>
        public bool? IsGenericMethodDefinition { get; private set; }
        /// <summary>The IsHideBySig property</summary>
        public bool? IsHideBySig { get; private set; }
        /// <summary>The IsPrivate property</summary>
        public bool? IsPrivate { get; private set; }
        /// <summary>The IsPublic property</summary>
        public bool? IsPublic { get; private set; }
        /// <summary>The IsSecurityCritical property</summary>
        public bool? IsSecurityCritical { get; private set; }
        /// <summary>The IsSecuritySafeCritical property</summary>
        public bool? IsSecuritySafeCritical { get; private set; }
        /// <summary>The IsSecurityTransparent property</summary>
        public bool? IsSecurityTransparent { get; private set; }
        /// <summary>The IsSpecialName property</summary>
        public bool? IsSpecialName { get; private set; }
        /// <summary>The IsStatic property</summary>
        public bool? IsStatic { get; private set; }
        /// <summary>The IsVirtual property</summary>
        public bool? IsVirtual { get; private set; }
        /// <summary>The MemberType property</summary>
        public int? MemberType { get; set; }
        /// <summary>The MetadataToken property</summary>
        public int? MetadataToken { get; private set; }
        /// <summary>The MethodHandle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RuntimeMethodHandleObject? MethodHandle { get; set; }
#nullable restore
#else
        public RuntimeMethodHandleObject MethodHandle { get; set; }
#endif
        /// <summary>The MethodImplementationFlags property</summary>
        public int? MethodImplementationFlags { get; set; }
        /// <summary>The Module property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Qwips.SmartService.ServiceProvider.ClientSdk.Models.Module? Module { get; set; }
#nullable restore
#else
        public Qwips.SmartService.ServiceProvider.ClientSdk.Models.Module Module { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The ReflectedType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TypeObject? ReflectedType { get; set; }
#nullable restore
#else
        public TypeObject ReflectedType { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ConstructorInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ConstructorInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Attributes", n => { Attributes = n.GetIntValue(); } },
                {"CallingConvention", n => { CallingConvention = n.GetIntValue(); } },
                {"ContainsGenericParameters", n => { ContainsGenericParameters = n.GetBoolValue(); } },
                {"CustomAttributes", n => { CustomAttributes = n.GetCollectionOfObjectValues<CustomAttributeData>(CustomAttributeData.CreateFromDiscriminatorValue)?.ToList(); } },
                {"DeclaringType", n => { DeclaringType = n.GetObjectValue<TypeObject>(TypeObject.CreateFromDiscriminatorValue); } },
                {"IsAbstract", n => { IsAbstract = n.GetBoolValue(); } },
                {"IsAssembly", n => { IsAssembly = n.GetBoolValue(); } },
                {"IsConstructor", n => { IsConstructor = n.GetBoolValue(); } },
                {"IsFamily", n => { IsFamily = n.GetBoolValue(); } },
                {"IsFamilyAndAssembly", n => { IsFamilyAndAssembly = n.GetBoolValue(); } },
                {"IsFamilyOrAssembly", n => { IsFamilyOrAssembly = n.GetBoolValue(); } },
                {"IsFinal", n => { IsFinal = n.GetBoolValue(); } },
                {"IsGenericMethod", n => { IsGenericMethod = n.GetBoolValue(); } },
                {"IsGenericMethodDefinition", n => { IsGenericMethodDefinition = n.GetBoolValue(); } },
                {"IsHideBySig", n => { IsHideBySig = n.GetBoolValue(); } },
                {"IsPrivate", n => { IsPrivate = n.GetBoolValue(); } },
                {"IsPublic", n => { IsPublic = n.GetBoolValue(); } },
                {"IsSecurityCritical", n => { IsSecurityCritical = n.GetBoolValue(); } },
                {"IsSecuritySafeCritical", n => { IsSecuritySafeCritical = n.GetBoolValue(); } },
                {"IsSecurityTransparent", n => { IsSecurityTransparent = n.GetBoolValue(); } },
                {"IsSpecialName", n => { IsSpecialName = n.GetBoolValue(); } },
                {"IsStatic", n => { IsStatic = n.GetBoolValue(); } },
                {"IsVirtual", n => { IsVirtual = n.GetBoolValue(); } },
                {"MemberType", n => { MemberType = n.GetIntValue(); } },
                {"MetadataToken", n => { MetadataToken = n.GetIntValue(); } },
                {"MethodHandle", n => { MethodHandle = n.GetObjectValue<RuntimeMethodHandleObject>(RuntimeMethodHandleObject.CreateFromDiscriminatorValue); } },
                {"MethodImplementationFlags", n => { MethodImplementationFlags = n.GetIntValue(); } },
                {"Module", n => { Module = n.GetObjectValue<Qwips.SmartService.ServiceProvider.ClientSdk.Models.Module>(Qwips.SmartService.ServiceProvider.ClientSdk.Models.Module.CreateFromDiscriminatorValue); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"ReflectedType", n => { ReflectedType = n.GetObjectValue<TypeObject>(TypeObject.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("Attributes", Attributes);
            writer.WriteIntValue("CallingConvention", CallingConvention);
            writer.WriteObjectValue<TypeObject>("DeclaringType", DeclaringType);
            writer.WriteIntValue("MemberType", MemberType);
            writer.WriteObjectValue<RuntimeMethodHandleObject>("MethodHandle", MethodHandle);
            writer.WriteIntValue("MethodImplementationFlags", MethodImplementationFlags);
            writer.WriteObjectValue<Qwips.SmartService.ServiceProvider.ClientSdk.Models.Module>("Module", Module);
            writer.WriteObjectValue<TypeObject>("ReflectedType", ReflectedType);
        }
    }
}
