// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class JobPartsDto : IParsable {
        /// <summary>The Customer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CustomerDto? Customer { get; set; }
#nullable restore
#else
        public CustomerDto Customer { get; set; }
#endif
        /// <summary>The Job property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ChildJobDto? Job { get; set; }
#nullable restore
#else
        public ChildJobDto Job { get; set; }
#endif
        /// <summary>The MyStoreId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MyStoreId { get; set; }
#nullable restore
#else
        public string MyStoreId { get; set; }
#endif
        /// <summary>The Order property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GenericOrderDto? Order { get; set; }
#nullable restore
#else
        public GenericOrderDto Order { get; set; }
#endif
        /// <summary>The Parts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<JobPartDto>? Parts { get; set; }
#nullable restore
#else
        public List<JobPartDto> Parts { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JobPartsDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JobPartsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Customer", n => { Customer = n.GetObjectValue<CustomerDto>(CustomerDto.CreateFromDiscriminatorValue); } },
                {"Job", n => { Job = n.GetObjectValue<ChildJobDto>(ChildJobDto.CreateFromDiscriminatorValue); } },
                {"MyStoreId", n => { MyStoreId = n.GetStringValue(); } },
                {"Order", n => { Order = n.GetObjectValue<GenericOrderDto>(GenericOrderDto.CreateFromDiscriminatorValue); } },
                {"Parts", n => { Parts = n.GetCollectionOfObjectValues<JobPartDto>(JobPartDto.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<CustomerDto>("Customer", Customer);
            writer.WriteObjectValue<ChildJobDto>("Job", Job);
            writer.WriteStringValue("MyStoreId", MyStoreId);
            writer.WriteObjectValue<GenericOrderDto>("Order", Order);
            writer.WriteCollectionOfObjectValues<JobPartDto>("Parts", Parts);
        }
    }
}
