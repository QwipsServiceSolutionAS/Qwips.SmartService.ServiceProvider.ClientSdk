// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class CreateMachineHistoryEntryDto : IParsable {
        /// <summary>The Mail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mail { get; set; }
#nullable restore
#else
        public string Mail { get; set; }
#endif
        /// <summary>The Notat property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notat { get; set; }
#nullable restore
#else
        public string Notat { get; set; }
#endif
        /// <summary>The ProblemText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProblemText { get; set; }
#nullable restore
#else
        public string ProblemText { get; set; }
#endif
        /// <summary>The SerialNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>The Status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The WorkDate property</summary>
        public DateTimeOffset? WorkDate { get; set; }
        /// <summary>The WorkEndTime property</summary>
        public DateTimeOffset? WorkEndTime { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateMachineHistoryEntryDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateMachineHistoryEntryDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Mail", n => { Mail = n.GetStringValue(); } },
                {"Notat", n => { Notat = n.GetStringValue(); } },
                {"ProblemText", n => { ProblemText = n.GetStringValue(); } },
                {"SerialNumber", n => { SerialNumber = n.GetStringValue(); } },
                {"Status", n => { Status = n.GetStringValue(); } },
                {"WorkDate", n => { WorkDate = n.GetDateTimeOffsetValue(); } },
                {"WorkEndTime", n => { WorkEndTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Mail", Mail);
            writer.WriteStringValue("Notat", Notat);
            writer.WriteStringValue("ProblemText", ProblemText);
            writer.WriteStringValue("SerialNumber", SerialNumber);
            writer.WriteStringValue("Status", Status);
            writer.WriteDateTimeOffsetValue("WorkDate", WorkDate);
            writer.WriteDateTimeOffsetValue("WorkEndTime", WorkEndTime);
        }
    }
}
