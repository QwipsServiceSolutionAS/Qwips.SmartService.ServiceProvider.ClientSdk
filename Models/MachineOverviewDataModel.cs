// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.Integration.ClientSdk.Models {
    public class MachineOverviewDataModel : IParsable {
        /// <summary>The ActivePartsJobs property</summary>
        public int? ActivePartsJobs { get; set; }
        /// <summary>The ActiveServiceJobs property</summary>
        public int? ActiveServiceJobs { get; set; }
        /// <summary>The BoughtDate property</summary>
        public DateTimeOffset? BoughtDate { get; set; }
        /// <summary>The CentralSystemId property</summary>
        public int? CentralSystemId { get; set; }
        /// <summary>The CustomerAgreement property</summary>
        public bool? CustomerAgreement { get; set; }
        /// <summary>The CustomerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>The DisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The Facility property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Facility { get; set; }
#nullable restore
#else
        public string Facility { get; set; }
#endif
        /// <summary>The FirmId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirmId { get; set; }
#nullable restore
#else
        public string FirmId { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The InstallationDate property</summary>
        public DateTimeOffset? InstallationDate { get; set; }
        /// <summary>The IsActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The MachineModelId property</summary>
        public int? MachineModelId { get; set; }
        /// <summary>The MachineModelName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineModelName { get; set; }
#nullable restore
#else
        public string MachineModelName { get; set; }
#endif
        /// <summary>The MachineType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineType { get; set; }
#nullable restore
#else
        public string MachineType { get; set; }
#endif
        /// <summary>The ModelImage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelImage { get; set; }
#nullable restore
#else
        public string ModelImage { get; set; }
#endif
        /// <summary>The Modified property</summary>
        public DateTimeOffset? Modified { get; set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Note property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The ParentMachineModelName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentMachineModelName { get; set; }
#nullable restore
#else
        public string ParentMachineModelName { get; set; }
#endif
        /// <summary>The Qrcode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Qrcode { get; set; }
#nullable restore
#else
        public string Qrcode { get; set; }
#endif
        /// <summary>The RetiredDate property</summary>
        public DateTimeOffset? RetiredDate { get; set; }
        /// <summary>The SerialNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>The ServiceAgreement property</summary>
        public bool? ServiceAgreement { get; set; }
        /// <summary>The ServiceAgreementNextDate property</summary>
        public DateTimeOffset? ServiceAgreementNextDate { get; set; }
        /// <summary>The SupplierName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupplierName { get; set; }
#nullable restore
#else
        public string SupplierName { get; set; }
#endif
        /// <summary>The TotalPartsAmount property</summary>
        public double? TotalPartsAmount { get; set; }
        /// <summary>The TotalServiceAmount property</summary>
        public double? TotalServiceAmount { get; set; }
        /// <summary>The WarrantyExpiresDate property</summary>
        public DateTimeOffset? WarrantyExpiresDate { get; set; }
        /// <summary>The YearlyBudget property</summary>
        public double? YearlyBudget { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MachineOverviewDataModel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MachineOverviewDataModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ActivePartsJobs", n => { ActivePartsJobs = n.GetIntValue(); } },
                {"ActiveServiceJobs", n => { ActiveServiceJobs = n.GetIntValue(); } },
                {"BoughtDate", n => { BoughtDate = n.GetDateTimeOffsetValue(); } },
                {"CentralSystemId", n => { CentralSystemId = n.GetIntValue(); } },
                {"CustomerAgreement", n => { CustomerAgreement = n.GetBoolValue(); } },
                {"CustomerId", n => { CustomerId = n.GetStringValue(); } },
                {"DisplayName", n => { DisplayName = n.GetStringValue(); } },
                {"Facility", n => { Facility = n.GetStringValue(); } },
                {"FirmId", n => { FirmId = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"InstallationDate", n => { InstallationDate = n.GetDateTimeOffsetValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"MachineModelId", n => { MachineModelId = n.GetIntValue(); } },
                {"MachineModelName", n => { MachineModelName = n.GetStringValue(); } },
                {"MachineType", n => { MachineType = n.GetStringValue(); } },
                {"ModelImage", n => { ModelImage = n.GetStringValue(); } },
                {"Modified", n => { Modified = n.GetDateTimeOffsetValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"Note", n => { Note = n.GetStringValue(); } },
                {"ParentMachineModelName", n => { ParentMachineModelName = n.GetStringValue(); } },
                {"Qrcode", n => { Qrcode = n.GetStringValue(); } },
                {"RetiredDate", n => { RetiredDate = n.GetDateTimeOffsetValue(); } },
                {"SerialNumber", n => { SerialNumber = n.GetStringValue(); } },
                {"ServiceAgreement", n => { ServiceAgreement = n.GetBoolValue(); } },
                {"ServiceAgreementNextDate", n => { ServiceAgreementNextDate = n.GetDateTimeOffsetValue(); } },
                {"SupplierName", n => { SupplierName = n.GetStringValue(); } },
                {"TotalPartsAmount", n => { TotalPartsAmount = n.GetDoubleValue(); } },
                {"TotalServiceAmount", n => { TotalServiceAmount = n.GetDoubleValue(); } },
                {"WarrantyExpiresDate", n => { WarrantyExpiresDate = n.GetDateTimeOffsetValue(); } },
                {"YearlyBudget", n => { YearlyBudget = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("ActivePartsJobs", ActivePartsJobs);
            writer.WriteIntValue("ActiveServiceJobs", ActiveServiceJobs);
            writer.WriteDateTimeOffsetValue("BoughtDate", BoughtDate);
            writer.WriteIntValue("CentralSystemId", CentralSystemId);
            writer.WriteBoolValue("CustomerAgreement", CustomerAgreement);
            writer.WriteStringValue("CustomerId", CustomerId);
            writer.WriteStringValue("DisplayName", DisplayName);
            writer.WriteStringValue("Facility", Facility);
            writer.WriteStringValue("FirmId", FirmId);
            writer.WriteIntValue("Id", Id);
            writer.WriteDateTimeOffsetValue("InstallationDate", InstallationDate);
            writer.WriteBoolValue("IsActive", IsActive);
            writer.WriteIntValue("MachineModelId", MachineModelId);
            writer.WriteStringValue("MachineModelName", MachineModelName);
            writer.WriteStringValue("MachineType", MachineType);
            writer.WriteStringValue("ModelImage", ModelImage);
            writer.WriteDateTimeOffsetValue("Modified", Modified);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("Note", Note);
            writer.WriteStringValue("ParentMachineModelName", ParentMachineModelName);
            writer.WriteStringValue("Qrcode", Qrcode);
            writer.WriteDateTimeOffsetValue("RetiredDate", RetiredDate);
            writer.WriteStringValue("SerialNumber", SerialNumber);
            writer.WriteBoolValue("ServiceAgreement", ServiceAgreement);
            writer.WriteDateTimeOffsetValue("ServiceAgreementNextDate", ServiceAgreementNextDate);
            writer.WriteStringValue("SupplierName", SupplierName);
            writer.WriteDoubleValue("TotalPartsAmount", TotalPartsAmount);
            writer.WriteDoubleValue("TotalServiceAmount", TotalServiceAmount);
            writer.WriteDateTimeOffsetValue("WarrantyExpiresDate", WarrantyExpiresDate);
            writer.WriteDoubleValue("YearlyBudget", YearlyBudget);
        }
    }
}
