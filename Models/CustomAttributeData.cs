// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class CustomAttributeData : IParsable {
        /// <summary>The AttributeType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TypeObject? AttributeType { get; set; }
#nullable restore
#else
        public TypeObject AttributeType { get; set; }
#endif
        /// <summary>The Constructor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ConstructorInfo? Constructor { get; set; }
#nullable restore
#else
        public ConstructorInfo Constructor { get; set; }
#endif
        /// <summary>The ConstructorArguments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CustomAttributeTypedArgument>? ConstructorArguments { get; private set; }
#nullable restore
#else
        public List<CustomAttributeTypedArgument> ConstructorArguments { get; private set; }
#endif
        /// <summary>The NamedArguments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CustomAttributeNamedArgument>? NamedArguments { get; private set; }
#nullable restore
#else
        public List<CustomAttributeNamedArgument> NamedArguments { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CustomAttributeData CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CustomAttributeData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AttributeType", n => { AttributeType = n.GetObjectValue<TypeObject>(TypeObject.CreateFromDiscriminatorValue); } },
                {"Constructor", n => { Constructor = n.GetObjectValue<ConstructorInfo>(ConstructorInfo.CreateFromDiscriminatorValue); } },
                {"ConstructorArguments", n => { ConstructorArguments = n.GetCollectionOfObjectValues<CustomAttributeTypedArgument>(CustomAttributeTypedArgument.CreateFromDiscriminatorValue)?.ToList(); } },
                {"NamedArguments", n => { NamedArguments = n.GetCollectionOfObjectValues<CustomAttributeNamedArgument>(CustomAttributeNamedArgument.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<TypeObject>("AttributeType", AttributeType);
            writer.WriteObjectValue<ConstructorInfo>("Constructor", Constructor);
        }
    }
}
