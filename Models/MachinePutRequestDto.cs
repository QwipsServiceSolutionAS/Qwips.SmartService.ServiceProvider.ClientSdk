// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.Integration.ClientSdk.Models {
    public class MachinePutRequestDto : IParsable {
        /// <summary>The AssetTypeId property</summary>
        public int? AssetTypeId { get; set; }
        /// <summary>The BoughtDate property</summary>
        public DateTimeOffset? BoughtDate { get; set; }
        /// <summary>The CustomerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>The ExtRef1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExtRef1 { get; set; }
#nullable restore
#else
        public string ExtRef1 { get; set; }
#endif
        /// <summary>The Facility property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Facility { get; set; }
#nullable restore
#else
        public string Facility { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The InstallationDate property</summary>
        public DateTimeOffset? InstallationDate { get; set; }
        /// <summary>The IsActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The MachineModelId property</summary>
        public int? MachineModelId { get; set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Note property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The Qrcode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Qrcode { get; set; }
#nullable restore
#else
        public string Qrcode { get; set; }
#endif
        /// <summary>The RetiredDate property</summary>
        public DateTimeOffset? RetiredDate { get; set; }
        /// <summary>The SerialNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>The WarrantyExpiresDate property</summary>
        public DateTimeOffset? WarrantyExpiresDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MachinePutRequestDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MachinePutRequestDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AssetTypeId", n => { AssetTypeId = n.GetIntValue(); } },
                {"BoughtDate", n => { BoughtDate = n.GetDateTimeOffsetValue(); } },
                {"CustomerId", n => { CustomerId = n.GetStringValue(); } },
                {"ExtRef1", n => { ExtRef1 = n.GetStringValue(); } },
                {"Facility", n => { Facility = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"InstallationDate", n => { InstallationDate = n.GetDateTimeOffsetValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"MachineModelId", n => { MachineModelId = n.GetIntValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"Note", n => { Note = n.GetStringValue(); } },
                {"Qrcode", n => { Qrcode = n.GetStringValue(); } },
                {"RetiredDate", n => { RetiredDate = n.GetDateTimeOffsetValue(); } },
                {"SerialNumber", n => { SerialNumber = n.GetStringValue(); } },
                {"WarrantyExpiresDate", n => { WarrantyExpiresDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("AssetTypeId", AssetTypeId);
            writer.WriteDateTimeOffsetValue("BoughtDate", BoughtDate);
            writer.WriteStringValue("CustomerId", CustomerId);
            writer.WriteStringValue("ExtRef1", ExtRef1);
            writer.WriteStringValue("Facility", Facility);
            writer.WriteIntValue("Id", Id);
            writer.WriteDateTimeOffsetValue("InstallationDate", InstallationDate);
            writer.WriteBoolValue("IsActive", IsActive);
            writer.WriteIntValue("MachineModelId", MachineModelId);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("Note", Note);
            writer.WriteStringValue("Qrcode", Qrcode);
            writer.WriteDateTimeOffsetValue("RetiredDate", RetiredDate);
            writer.WriteStringValue("SerialNumber", SerialNumber);
            writer.WriteDateTimeOffsetValue("WarrantyExpiresDate", WarrantyExpiresDate);
        }
    }
}
