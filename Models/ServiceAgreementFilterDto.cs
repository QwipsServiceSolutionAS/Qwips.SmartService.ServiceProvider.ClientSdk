// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class ServiceAgreementFilterDto : IParsable {
        /// <summary>The Customer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Customer { get; set; }
#nullable restore
#else
        public List<string> Customer { get; set; }
#endif
        /// <summary>The DateRangeAppointment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DateRangeDto? DateRangeAppointment { get; set; }
#nullable restore
#else
        public DateRangeDto DateRangeAppointment { get; set; }
#endif
        /// <summary>The Machine property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Machine { get; set; }
#nullable restore
#else
        public List<string> Machine { get; set; }
#endif
        /// <summary>The MachineCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MachineCategory { get; set; }
#nullable restore
#else
        public List<string> MachineCategory { get; set; }
#endif
        /// <summary>The MachineModel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MachineModel { get; set; }
#nullable restore
#else
        public List<string> MachineModel { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ServiceAgreementFilterDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ServiceAgreementFilterDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Customer", n => { Customer = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"DateRangeAppointment", n => { DateRangeAppointment = n.GetObjectValue<DateRangeDto>(DateRangeDto.CreateFromDiscriminatorValue); } },
                {"Machine", n => { Machine = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"MachineCategory", n => { MachineCategory = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"MachineModel", n => { MachineModel = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("Customer", Customer);
            writer.WriteObjectValue<DateRangeDto>("DateRangeAppointment", DateRangeAppointment);
            writer.WriteCollectionOfPrimitiveValues<string>("Machine", Machine);
            writer.WriteCollectionOfPrimitiveValues<string>("MachineCategory", MachineCategory);
            writer.WriteCollectionOfPrimitiveValues<string>("MachineModel", MachineModel);
        }
    }
}
