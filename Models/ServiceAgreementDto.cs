// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.Integration.ClientSdk.Models {
    public class ServiceAgreementDto : IParsable {
        /// <summary>The HoursOfWorkEachTechnician property</summary>
        public double? HoursOfWorkEachTechnician { get; set; }
        /// <summary>The MachineId property</summary>
        public int? MachineId { get; set; }
        /// <summary>The MachineTypeId property</summary>
        public int? MachineTypeId { get; set; }
        /// <summary>The NumberOfTechnicianRequired property</summary>
        public int? NumberOfTechnicianRequired { get; set; }
        /// <summary>The ReoccuranceHowOften property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReoccuranceHowOften { get; set; }
#nullable restore
#else
        public string ReoccuranceHowOften { get; set; }
#endif
        /// <summary>The ReoccuranceRepeat property</summary>
        public int? ReoccuranceRepeat { get; set; }
        /// <summary>The ReocurrencyDayOffset property</summary>
        public int? ReocurrencyDayOffset { get; set; }
        /// <summary>The ReocurrencyEndDate property</summary>
        public DateTimeOffset? ReocurrencyEndDate { get; set; }
        /// <summary>The ReocurrencyStartDate property</summary>
        public DateTimeOffset? ReocurrencyStartDate { get; set; }
        /// <summary>The ServiceFromInstallationDate property</summary>
        public bool? ServiceFromInstallationDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ServiceAgreementDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ServiceAgreementDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"HoursOfWorkEachTechnician", n => { HoursOfWorkEachTechnician = n.GetDoubleValue(); } },
                {"MachineId", n => { MachineId = n.GetIntValue(); } },
                {"MachineTypeId", n => { MachineTypeId = n.GetIntValue(); } },
                {"NumberOfTechnicianRequired", n => { NumberOfTechnicianRequired = n.GetIntValue(); } },
                {"ReoccuranceHowOften", n => { ReoccuranceHowOften = n.GetStringValue(); } },
                {"ReoccuranceRepeat", n => { ReoccuranceRepeat = n.GetIntValue(); } },
                {"ReocurrencyDayOffset", n => { ReocurrencyDayOffset = n.GetIntValue(); } },
                {"ReocurrencyEndDate", n => { ReocurrencyEndDate = n.GetDateTimeOffsetValue(); } },
                {"ReocurrencyStartDate", n => { ReocurrencyStartDate = n.GetDateTimeOffsetValue(); } },
                {"ServiceFromInstallationDate", n => { ServiceFromInstallationDate = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("HoursOfWorkEachTechnician", HoursOfWorkEachTechnician);
            writer.WriteIntValue("MachineId", MachineId);
            writer.WriteIntValue("MachineTypeId", MachineTypeId);
            writer.WriteIntValue("NumberOfTechnicianRequired", NumberOfTechnicianRequired);
            writer.WriteStringValue("ReoccuranceHowOften", ReoccuranceHowOften);
            writer.WriteIntValue("ReoccuranceRepeat", ReoccuranceRepeat);
            writer.WriteIntValue("ReocurrencyDayOffset", ReocurrencyDayOffset);
            writer.WriteDateTimeOffsetValue("ReocurrencyEndDate", ReocurrencyEndDate);
            writer.WriteDateTimeOffsetValue("ReocurrencyStartDate", ReocurrencyStartDate);
            writer.WriteBoolValue("ServiceFromInstallationDate", ServiceFromInstallationDate);
        }
    }
}
