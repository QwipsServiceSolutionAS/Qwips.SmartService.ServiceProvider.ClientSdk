// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class ChildJobDto : IParsable {
        /// <summary>The CreatedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>The CreatedDate property</summary>
        public DateTimeOffset? CreatedDate { get; set; }
        /// <summary>The CustomerComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerComment { get; set; }
#nullable restore
#else
        public string CustomerComment { get; set; }
#endif
        /// <summary>The Flag property</summary>
        public int? Flag { get; set; }
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The InvoiceComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceComment { get; set; }
#nullable restore
#else
        public string InvoiceComment { get; set; }
#endif
        /// <summary>The JobCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobCategoryDto? JobCategory { get; set; }
#nullable restore
#else
        public JobCategoryDto JobCategory { get; set; }
#endif
        /// <summary>The JobCategoryId property</summary>
        public int? JobCategoryId { get; set; }
        /// <summary>The JobStatusId property</summary>
        public int? JobStatusId { get; set; }
        /// <summary>The Machine property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MachineDto? Machine { get; set; }
#nullable restore
#else
        public MachineDto Machine { get; set; }
#endif
        /// <summary>The MachineId property</summary>
        public int? MachineId { get; set; }
        /// <summary>The NoInvoice property</summary>
        public bool? NoInvoice { get; set; }
        /// <summary>The ParentId property</summary>
        public int? ParentId { get; set; }
        /// <summary>The RepairCodes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RepairCodeDto>? RepairCodes { get; set; }
#nullable restore
#else
        public List<RepairCodeDto> RepairCodes { get; set; }
#endif
        /// <summary>The RepairPlace property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RepairPlaceDto? RepairPlace { get; set; }
#nullable restore
#else
        public RepairPlaceDto RepairPlace { get; set; }
#endif
        /// <summary>The RepairPlaceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepairPlaceId { get; set; }
#nullable restore
#else
        public string RepairPlaceId { get; set; }
#endif
        /// <summary>The SupplierFailureCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FailiureCodeDto? SupplierFailureCode { get; set; }
#nullable restore
#else
        public FailiureCodeDto SupplierFailureCode { get; set; }
#endif
        /// <summary>The SupplierFailureCodeId property</summary>
        public int? SupplierFailureCodeId { get; set; }
        /// <summary>The TechnicianComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TechnicianComment { get; set; }
#nullable restore
#else
        public string TechnicianComment { get; set; }
#endif
        /// <summary>The WarrantyType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WarrantyTypeDto? WarrantyType { get; set; }
#nullable restore
#else
        public WarrantyTypeDto WarrantyType { get; set; }
#endif
        /// <summary>The WarrentyTypeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WarrentyTypeId { get; set; }
#nullable restore
#else
        public string WarrentyTypeId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ChildJobDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ChildJobDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"CreatedBy", n => { CreatedBy = n.GetStringValue(); } },
                {"CreatedDate", n => { CreatedDate = n.GetDateTimeOffsetValue(); } },
                {"CustomerComment", n => { CustomerComment = n.GetStringValue(); } },
                {"Flag", n => { Flag = n.GetIntValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"InvoiceComment", n => { InvoiceComment = n.GetStringValue(); } },
                {"JobCategory", n => { JobCategory = n.GetObjectValue<JobCategoryDto>(JobCategoryDto.CreateFromDiscriminatorValue); } },
                {"JobCategoryId", n => { JobCategoryId = n.GetIntValue(); } },
                {"JobStatusId", n => { JobStatusId = n.GetIntValue(); } },
                {"Machine", n => { Machine = n.GetObjectValue<MachineDto>(MachineDto.CreateFromDiscriminatorValue); } },
                {"MachineId", n => { MachineId = n.GetIntValue(); } },
                {"NoInvoice", n => { NoInvoice = n.GetBoolValue(); } },
                {"ParentId", n => { ParentId = n.GetIntValue(); } },
                {"RepairCodes", n => { RepairCodes = n.GetCollectionOfObjectValues<RepairCodeDto>(RepairCodeDto.CreateFromDiscriminatorValue)?.ToList(); } },
                {"RepairPlace", n => { RepairPlace = n.GetObjectValue<RepairPlaceDto>(RepairPlaceDto.CreateFromDiscriminatorValue); } },
                {"RepairPlaceId", n => { RepairPlaceId = n.GetStringValue(); } },
                {"SupplierFailureCode", n => { SupplierFailureCode = n.GetObjectValue<FailiureCodeDto>(FailiureCodeDto.CreateFromDiscriminatorValue); } },
                {"SupplierFailureCodeId", n => { SupplierFailureCodeId = n.GetIntValue(); } },
                {"TechnicianComment", n => { TechnicianComment = n.GetStringValue(); } },
                {"WarrantyType", n => { WarrantyType = n.GetObjectValue<WarrantyTypeDto>(WarrantyTypeDto.CreateFromDiscriminatorValue); } },
                {"WarrentyTypeId", n => { WarrentyTypeId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("CreatedBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("CreatedDate", CreatedDate);
            writer.WriteStringValue("CustomerComment", CustomerComment);
            writer.WriteIntValue("Flag", Flag);
            writer.WriteIntValue("Id", Id);
            writer.WriteStringValue("InvoiceComment", InvoiceComment);
            writer.WriteObjectValue<JobCategoryDto>("JobCategory", JobCategory);
            writer.WriteIntValue("JobCategoryId", JobCategoryId);
            writer.WriteIntValue("JobStatusId", JobStatusId);
            writer.WriteObjectValue<MachineDto>("Machine", Machine);
            writer.WriteIntValue("MachineId", MachineId);
            writer.WriteBoolValue("NoInvoice", NoInvoice);
            writer.WriteIntValue("ParentId", ParentId);
            writer.WriteCollectionOfObjectValues<RepairCodeDto>("RepairCodes", RepairCodes);
            writer.WriteObjectValue<RepairPlaceDto>("RepairPlace", RepairPlace);
            writer.WriteStringValue("RepairPlaceId", RepairPlaceId);
            writer.WriteObjectValue<FailiureCodeDto>("SupplierFailureCode", SupplierFailureCode);
            writer.WriteIntValue("SupplierFailureCodeId", SupplierFailureCodeId);
            writer.WriteStringValue("TechnicianComment", TechnicianComment);
            writer.WriteObjectValue<WarrantyTypeDto>("WarrantyType", WarrantyType);
            writer.WriteStringValue("WarrentyTypeId", WarrentyTypeId);
        }
    }
}
