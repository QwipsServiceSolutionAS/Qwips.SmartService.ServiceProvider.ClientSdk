// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class LeadRequestDto : IParsable {
        /// <summary>The CustomerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>The Deleted property</summary>
        public bool? Deleted { get; set; }
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The JobId property</summary>
        public int? JobId { get; set; }
        /// <summary>The LeadTypeId property</summary>
        public int? LeadTypeId { get; set; }
        /// <summary>The MachineId property</summary>
        public int? MachineId { get; set; }
        /// <summary>The Note property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The State property</summary>
        public int? State { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LeadRequestDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LeadRequestDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"CustomerId", n => { CustomerId = n.GetStringValue(); } },
                {"Deleted", n => { Deleted = n.GetBoolValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"JobId", n => { JobId = n.GetIntValue(); } },
                {"LeadTypeId", n => { LeadTypeId = n.GetIntValue(); } },
                {"MachineId", n => { MachineId = n.GetIntValue(); } },
                {"Note", n => { Note = n.GetStringValue(); } },
                {"State", n => { State = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("CustomerId", CustomerId);
            writer.WriteBoolValue("Deleted", Deleted);
            writer.WriteIntValue("Id", Id);
            writer.WriteIntValue("JobId", JobId);
            writer.WriteIntValue("LeadTypeId", LeadTypeId);
            writer.WriteIntValue("MachineId", MachineId);
            writer.WriteStringValue("Note", Note);
            writer.WriteIntValue("State", State);
        }
    }
}
