// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.Integration.ClientSdk.Models {
    public class ServiceProviderChildJobDataModel : IParsable {
        /// <summary>The CreatedDate property</summary>
        public DateTimeOffset? CreatedDate { get; set; }
        /// <summary>The CustomerComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerComment { get; set; }
#nullable restore
#else
        public string CustomerComment { get; set; }
#endif
        /// <summary>The DisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The EstimatedTime property</summary>
        public double? EstimatedTime { get; set; }
        /// <summary>The Flag property</summary>
        public int? Flag { get; set; }
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The InvoiceComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceComment { get; set; }
#nullable restore
#else
        public string InvoiceComment { get; set; }
#endif
        /// <summary>The IsClosed property</summary>
        public bool? IsClosed { get; set; }
        /// <summary>The IsParent property</summary>
        public bool? IsParent { get; set; }
        /// <summary>The JobCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobCategoryModel? JobCategory { get; set; }
#nullable restore
#else
        public JobCategoryModel JobCategory { get; set; }
#endif
        /// <summary>The JobTypeId property</summary>
        public int? JobTypeId { get; set; }
        /// <summary>The JobTypeName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTypeName { get; set; }
#nullable restore
#else
        public string JobTypeName { get; set; }
#endif
        /// <summary>The Machine property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MachineOverviewDataModel? Machine { get; set; }
#nullable restore
#else
        public MachineOverviewDataModel Machine { get; set; }
#endif
        /// <summary>The Modified property</summary>
        public DateTimeOffset? Modified { get; set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The OrderId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderId { get; set; }
#nullable restore
#else
        public string OrderId { get; set; }
#endif
        /// <summary>The StatusId property</summary>
        public int? StatusId { get; set; }
        /// <summary>The StatusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusName { get; set; }
#nullable restore
#else
        public string StatusName { get; set; }
#endif
        /// <summary>The TechnicianComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TechnicianComment { get; set; }
#nullable restore
#else
        public string TechnicianComment { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ServiceProviderChildJobDataModel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ServiceProviderChildJobDataModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"CreatedDate", n => { CreatedDate = n.GetDateTimeOffsetValue(); } },
                {"CustomerComment", n => { CustomerComment = n.GetStringValue(); } },
                {"DisplayName", n => { DisplayName = n.GetStringValue(); } },
                {"EstimatedTime", n => { EstimatedTime = n.GetDoubleValue(); } },
                {"Flag", n => { Flag = n.GetIntValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"InvoiceComment", n => { InvoiceComment = n.GetStringValue(); } },
                {"IsClosed", n => { IsClosed = n.GetBoolValue(); } },
                {"IsParent", n => { IsParent = n.GetBoolValue(); } },
                {"JobCategory", n => { JobCategory = n.GetObjectValue<JobCategoryModel>(JobCategoryModel.CreateFromDiscriminatorValue); } },
                {"JobTypeId", n => { JobTypeId = n.GetIntValue(); } },
                {"JobTypeName", n => { JobTypeName = n.GetStringValue(); } },
                {"Machine", n => { Machine = n.GetObjectValue<MachineOverviewDataModel>(MachineOverviewDataModel.CreateFromDiscriminatorValue); } },
                {"Modified", n => { Modified = n.GetDateTimeOffsetValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"OrderId", n => { OrderId = n.GetStringValue(); } },
                {"StatusId", n => { StatusId = n.GetIntValue(); } },
                {"StatusName", n => { StatusName = n.GetStringValue(); } },
                {"TechnicianComment", n => { TechnicianComment = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("CreatedDate", CreatedDate);
            writer.WriteStringValue("CustomerComment", CustomerComment);
            writer.WriteStringValue("DisplayName", DisplayName);
            writer.WriteDoubleValue("EstimatedTime", EstimatedTime);
            writer.WriteIntValue("Flag", Flag);
            writer.WriteIntValue("Id", Id);
            writer.WriteStringValue("InvoiceComment", InvoiceComment);
            writer.WriteBoolValue("IsClosed", IsClosed);
            writer.WriteBoolValue("IsParent", IsParent);
            writer.WriteObjectValue<JobCategoryModel>("JobCategory", JobCategory);
            writer.WriteIntValue("JobTypeId", JobTypeId);
            writer.WriteStringValue("JobTypeName", JobTypeName);
            writer.WriteObjectValue<MachineOverviewDataModel>("Machine", Machine);
            writer.WriteDateTimeOffsetValue("Modified", Modified);
            writer.WriteStringValue("OrderId", OrderId);
            writer.WriteIntValue("StatusId", StatusId);
            writer.WriteStringValue("StatusName", StatusName);
            writer.WriteStringValue("TechnicianComment", TechnicianComment);
        }
    }
}
