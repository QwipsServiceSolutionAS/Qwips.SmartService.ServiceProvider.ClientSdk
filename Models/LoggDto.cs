// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class LoggDto : IParsable {
        /// <summary>The Comment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The JobId property</summary>
        public int? JobId { get; set; }
        /// <summary>The TimerDate property</summary>
        public DateTimeOffset? TimerDate { get; set; }
        /// <summary>The TimerDuration property</summary>
        public int? TimerDuration { get; set; }
        /// <summary>The UserDisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserDisplayName { get; set; }
#nullable restore
#else
        public string UserDisplayName { get; set; }
#endif
        /// <summary>The UserId property</summary>
        public int? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LoggDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LoggDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Comment", n => { Comment = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"JobId", n => { JobId = n.GetIntValue(); } },
                {"TimerDate", n => { TimerDate = n.GetDateTimeOffsetValue(); } },
                {"TimerDuration", n => { TimerDuration = n.GetIntValue(); } },
                {"UserDisplayName", n => { UserDisplayName = n.GetStringValue(); } },
                {"UserId", n => { UserId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Comment", Comment);
            writer.WriteIntValue("Id", Id);
            writer.WriteIntValue("JobId", JobId);
            writer.WriteDateTimeOffsetValue("TimerDate", TimerDate);
            writer.WriteIntValue("TimerDuration", TimerDuration);
            writer.WriteStringValue("UserDisplayName", UserDisplayName);
            writer.WriteIntValue("UserId", UserId);
        }
    }
}
