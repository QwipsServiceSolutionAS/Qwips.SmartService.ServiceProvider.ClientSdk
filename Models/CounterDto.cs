// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.Integration.ClientSdk.Models {
    public class CounterDto : IParsable {
        /// <summary>The Active property</summary>
        public bool? Active { get; set; }
        /// <summary>The Global property</summary>
        public bool? Global { get; set; }
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The LinkedCount property</summary>
        public int? LinkedCount { get; set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CounterDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CounterDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Active", n => { Active = n.GetBoolValue(); } },
                {"Global", n => { Global = n.GetBoolValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"LinkedCount", n => { LinkedCount = n.GetIntValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("Active", Active);
            writer.WriteBoolValue("Global", Global);
            writer.WriteIntValue("Id", Id);
            writer.WriteIntValue("LinkedCount", LinkedCount);
            writer.WriteStringValue("Name", Name);
        }
    }
}
