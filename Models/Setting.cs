// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class Setting : IParsable {
        /// <summary>The Description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The Encrypt property</summary>
        public bool? Encrypt { get; set; }
        /// <summary>The Encrypted property</summary>
        public bool? Encrypted { get; set; }
        /// <summary>The Group property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Group { get; set; }
#nullable restore
#else
        public string Group { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The SettingValue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SettingValue { get; set; }
#nullable restore
#else
        public string SettingValue { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Setting CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Setting();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Description", n => { Description = n.GetStringValue(); } },
                {"Encrypt", n => { Encrypt = n.GetBoolValue(); } },
                {"Encrypted", n => { Encrypted = n.GetBoolValue(); } },
                {"Group", n => { Group = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"SettingValue", n => { SettingValue = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Description", Description);
            writer.WriteBoolValue("Encrypt", Encrypt);
            writer.WriteBoolValue("Encrypted", Encrypted);
            writer.WriteStringValue("Group", Group);
            writer.WriteIntValue("Id", Id);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("SettingValue", SettingValue);
        }
    }
}
