// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.Integration.ClientSdk.Models {
    public class CustomerDto : IParsable {
        /// <summary>The Address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AddressDto? Address { get; set; }
#nullable restore
#else
        public AddressDto Address { get; set; }
#endif
        /// <summary>The Contact property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContactDto? Contact { get; set; }
#nullable restore
#else
        public ContactDto Contact { get; set; }
#endif
        /// <summary>The CreditLimit property</summary>
        public double? CreditLimit { get; set; }
        /// <summary>The CreditLimitExceeded property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreditLimitExceeded { get; set; }
#nullable restore
#else
        public string CreditLimitExceeded { get; set; }
#endif
        /// <summary>The CustomerGroupNo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerGroupNo { get; set; }
#nullable restore
#else
        public string CustomerGroupNo { get; set; }
#endif
        /// <summary>The FreeFromVat property</summary>
        public bool? FreeFromVat { get; set; }
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The IsActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The Latitude property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Latitude { get; set; }
#nullable restore
#else
        public string Latitude { get; set; }
#endif
        /// <summary>The Longitude property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Longitude { get; set; }
#nullable restore
#else
        public string Longitude { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The OrganisationNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganisationNumber { get; set; }
#nullable restore
#else
        public string OrganisationNumber { get; set; }
#endif
        /// <summary>The ParentId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentId { get; set; }
#nullable restore
#else
        public string ParentId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CustomerDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CustomerDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Address", n => { Address = n.GetObjectValue<AddressDto>(AddressDto.CreateFromDiscriminatorValue); } },
                {"Contact", n => { Contact = n.GetObjectValue<ContactDto>(ContactDto.CreateFromDiscriminatorValue); } },
                {"CreditLimit", n => { CreditLimit = n.GetDoubleValue(); } },
                {"CreditLimitExceeded", n => { CreditLimitExceeded = n.GetStringValue(); } },
                {"CustomerGroupNo", n => { CustomerGroupNo = n.GetStringValue(); } },
                {"FreeFromVat", n => { FreeFromVat = n.GetBoolValue(); } },
                {"Id", n => { Id = n.GetStringValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"Latitude", n => { Latitude = n.GetStringValue(); } },
                {"Longitude", n => { Longitude = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"OrganisationNumber", n => { OrganisationNumber = n.GetStringValue(); } },
                {"ParentId", n => { ParentId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AddressDto>("Address", Address);
            writer.WriteObjectValue<ContactDto>("Contact", Contact);
            writer.WriteDoubleValue("CreditLimit", CreditLimit);
            writer.WriteStringValue("CreditLimitExceeded", CreditLimitExceeded);
            writer.WriteStringValue("CustomerGroupNo", CustomerGroupNo);
            writer.WriteBoolValue("FreeFromVat", FreeFromVat);
            writer.WriteStringValue("Id", Id);
            writer.WriteBoolValue("IsActive", IsActive);
            writer.WriteStringValue("Latitude", Latitude);
            writer.WriteStringValue("Longitude", Longitude);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("OrganisationNumber", OrganisationNumber);
            writer.WriteStringValue("ParentId", ParentId);
        }
    }
}
