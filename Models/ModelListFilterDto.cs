// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class ModelListFilterDto : IParsable {
        /// <summary>The ActiveState property</summary>
        public int? ActiveState { get; set; }
        /// <summary>The ExcludeItemIdList property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? ExcludeItemIdList { get; set; }
#nullable restore
#else
        public List<int?> ExcludeItemIdList { get; set; }
#endif
        /// <summary>The ItemsPerPage property</summary>
        public int? ItemsPerPage { get; set; }
        /// <summary>The MachineTypeIdList property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? MachineTypeIdList { get; set; }
#nullable restore
#else
        public List<int?> MachineTypeIdList { get; set; }
#endif
        /// <summary>The Page property</summary>
        public int? Page { get; set; }
        /// <summary>The PrependItemIdList property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? PrependItemIdList { get; set; }
#nullable restore
#else
        public List<int?> PrependItemIdList { get; set; }
#endif
        /// <summary>The SearchWord property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SearchWord { get; set; }
#nullable restore
#else
        public string SearchWord { get; set; }
#endif
        /// <summary>The SupplierIdList property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? SupplierIdList { get; set; }
#nullable restore
#else
        public List<int?> SupplierIdList { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ModelListFilterDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ModelListFilterDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ActiveState", n => { ActiveState = n.GetIntValue(); } },
                {"ExcludeItemIdList", n => { ExcludeItemIdList = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"ItemsPerPage", n => { ItemsPerPage = n.GetIntValue(); } },
                {"MachineTypeIdList", n => { MachineTypeIdList = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"Page", n => { Page = n.GetIntValue(); } },
                {"PrependItemIdList", n => { PrependItemIdList = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
                {"SearchWord", n => { SearchWord = n.GetStringValue(); } },
                {"SupplierIdList", n => { SupplierIdList = n.GetCollectionOfPrimitiveValues<int?>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("ActiveState", ActiveState);
            writer.WriteCollectionOfPrimitiveValues<int?>("ExcludeItemIdList", ExcludeItemIdList);
            writer.WriteIntValue("ItemsPerPage", ItemsPerPage);
            writer.WriteCollectionOfPrimitiveValues<int?>("MachineTypeIdList", MachineTypeIdList);
            writer.WriteIntValue("Page", Page);
            writer.WriteCollectionOfPrimitiveValues<int?>("PrependItemIdList", PrependItemIdList);
            writer.WriteStringValue("SearchWord", SearchWord);
            writer.WriteCollectionOfPrimitiveValues<int?>("SupplierIdList", SupplierIdList);
        }
    }
}
