// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class UserDto : IParsable {
        /// <summary>The Active property</summary>
        public bool? Active { get; set; }
        /// <summary>The CustomerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>The CustomerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerName { get; set; }
#nullable restore
#else
        public string CustomerName { get; set; }
#endif
        /// <summary>The EmailAdress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAdress { get; set; }
#nullable restore
#else
        public string EmailAdress { get; set; }
#endif
        /// <summary>The EmploymentId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmploymentId { get; set; }
#nullable restore
#else
        public string EmploymentId { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The IsCustomerContact property</summary>
        public bool? IsCustomerContact { get; set; }
        /// <summary>The IsTechnician property</summary>
        public bool? IsTechnician { get; set; }
        /// <summary>The Mobile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mobile { get; set; }
#nullable restore
#else
        public string Mobile { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The StoreId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StoreId { get; set; }
#nullable restore
#else
        public string StoreId { get; set; }
#endif
        /// <summary>The Uiculture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uiculture { get; set; }
#nullable restore
#else
        public string Uiculture { get; set; }
#endif
        /// <summary>The UserLogonName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserLogonName { get; set; }
#nullable restore
#else
        public string UserLogonName { get; set; }
#endif
        /// <summary>The UserTypeId property</summary>
        public int? UserTypeId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UserDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UserDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Active", n => { Active = n.GetBoolValue(); } },
                {"CustomerId", n => { CustomerId = n.GetStringValue(); } },
                {"CustomerName", n => { CustomerName = n.GetStringValue(); } },
                {"EmailAdress", n => { EmailAdress = n.GetStringValue(); } },
                {"EmploymentId", n => { EmploymentId = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"IsCustomerContact", n => { IsCustomerContact = n.GetBoolValue(); } },
                {"IsTechnician", n => { IsTechnician = n.GetBoolValue(); } },
                {"Mobile", n => { Mobile = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"Password", n => { Password = n.GetStringValue(); } },
                {"StoreId", n => { StoreId = n.GetStringValue(); } },
                {"Uiculture", n => { Uiculture = n.GetStringValue(); } },
                {"UserLogonName", n => { UserLogonName = n.GetStringValue(); } },
                {"UserTypeId", n => { UserTypeId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("Active", Active);
            writer.WriteStringValue("CustomerId", CustomerId);
            writer.WriteStringValue("CustomerName", CustomerName);
            writer.WriteStringValue("EmailAdress", EmailAdress);
            writer.WriteStringValue("EmploymentId", EmploymentId);
            writer.WriteIntValue("Id", Id);
            writer.WriteBoolValue("IsCustomerContact", IsCustomerContact);
            writer.WriteBoolValue("IsTechnician", IsTechnician);
            writer.WriteStringValue("Mobile", Mobile);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("Password", Password);
            writer.WriteStringValue("StoreId", StoreId);
            writer.WriteStringValue("Uiculture", Uiculture);
            writer.WriteStringValue("UserLogonName", UserLogonName);
            writer.WriteIntValue("UserTypeId", UserTypeId);
        }
    }
}
