// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class CreateChildJobMachineDto : IParsable {
        /// <summary>The CreatedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>The CustomerComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerComment { get; set; }
#nullable restore
#else
        public string CustomerComment { get; set; }
#endif
        /// <summary>The InvoiceComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceComment { get; set; }
#nullable restore
#else
        public string InvoiceComment { get; set; }
#endif
        /// <summary>The JobCategoryId property</summary>
        public int? JobCategoryId { get; set; }
        /// <summary>The MachineId property</summary>
        public int? MachineId { get; set; }
        /// <summary>The RepairPlaceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepairPlaceId { get; set; }
#nullable restore
#else
        public string RepairPlaceId { get; set; }
#endif
        /// <summary>The SupplierFailureCodeId property</summary>
        public int? SupplierFailureCodeId { get; set; }
        /// <summary>The WarrentyTypeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WarrentyTypeId { get; set; }
#nullable restore
#else
        public string WarrentyTypeId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateChildJobMachineDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateChildJobMachineDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"CreatedBy", n => { CreatedBy = n.GetStringValue(); } },
                {"CustomerComment", n => { CustomerComment = n.GetStringValue(); } },
                {"InvoiceComment", n => { InvoiceComment = n.GetStringValue(); } },
                {"JobCategoryId", n => { JobCategoryId = n.GetIntValue(); } },
                {"MachineId", n => { MachineId = n.GetIntValue(); } },
                {"RepairPlaceId", n => { RepairPlaceId = n.GetStringValue(); } },
                {"SupplierFailureCodeId", n => { SupplierFailureCodeId = n.GetIntValue(); } },
                {"WarrentyTypeId", n => { WarrentyTypeId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("CreatedBy", CreatedBy);
            writer.WriteStringValue("CustomerComment", CustomerComment);
            writer.WriteStringValue("InvoiceComment", InvoiceComment);
            writer.WriteIntValue("JobCategoryId", JobCategoryId);
            writer.WriteIntValue("MachineId", MachineId);
            writer.WriteStringValue("RepairPlaceId", RepairPlaceId);
            writer.WriteIntValue("SupplierFailureCodeId", SupplierFailureCodeId);
            writer.WriteStringValue("WarrentyTypeId", WarrentyTypeId);
        }
    }
}
