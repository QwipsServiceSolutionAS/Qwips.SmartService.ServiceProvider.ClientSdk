// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class ParameterInfo : IParsable {
        /// <summary>The Attributes property</summary>
        public int? Attributes { get; set; }
        /// <summary>The CustomAttributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CustomAttributeData>? CustomAttributes { get; private set; }
#nullable restore
#else
        public List<CustomAttributeData> CustomAttributes { get; private set; }
#endif
        /// <summary>The HasDefaultValue property</summary>
        public bool? HasDefaultValue { get; private set; }
        /// <summary>The IsIn property</summary>
        public bool? IsIn { get; private set; }
        /// <summary>The IsLcid property</summary>
        public bool? IsLcid { get; private set; }
        /// <summary>The IsOptional property</summary>
        public bool? IsOptional { get; private set; }
        /// <summary>The IsOut property</summary>
        public bool? IsOut { get; private set; }
        /// <summary>The IsRetval property</summary>
        public bool? IsRetval { get; private set; }
        /// <summary>The Member property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MemberInfo? Member { get; set; }
#nullable restore
#else
        public MemberInfo Member { get; set; }
#endif
        /// <summary>The MetadataToken property</summary>
        public int? MetadataToken { get; private set; }
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The ParameterType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TypeObject? ParameterType { get; set; }
#nullable restore
#else
        public TypeObject ParameterType { get; set; }
#endif
        /// <summary>The Position property</summary>
        public int? Position { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ParameterInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ParameterInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Attributes", n => { Attributes = n.GetIntValue(); } },
                {"CustomAttributes", n => { CustomAttributes = n.GetCollectionOfObjectValues<CustomAttributeData>(CustomAttributeData.CreateFromDiscriminatorValue)?.ToList(); } },
                {"HasDefaultValue", n => { HasDefaultValue = n.GetBoolValue(); } },
                {"IsIn", n => { IsIn = n.GetBoolValue(); } },
                {"IsLcid", n => { IsLcid = n.GetBoolValue(); } },
                {"IsOptional", n => { IsOptional = n.GetBoolValue(); } },
                {"IsOut", n => { IsOut = n.GetBoolValue(); } },
                {"IsRetval", n => { IsRetval = n.GetBoolValue(); } },
                {"Member", n => { Member = n.GetObjectValue<MemberInfo>(MemberInfo.CreateFromDiscriminatorValue); } },
                {"MetadataToken", n => { MetadataToken = n.GetIntValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"ParameterType", n => { ParameterType = n.GetObjectValue<TypeObject>(TypeObject.CreateFromDiscriminatorValue); } },
                {"Position", n => { Position = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("Attributes", Attributes);
            writer.WriteObjectValue<MemberInfo>("Member", Member);
            writer.WriteObjectValue<TypeObject>("ParameterType", ParameterType);
        }
    }
}
