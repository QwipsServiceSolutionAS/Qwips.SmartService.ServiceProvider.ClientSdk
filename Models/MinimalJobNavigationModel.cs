// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class MinimalJobNavigationModel : IParsable {
        /// <summary>The CompletedDate property</summary>
        public DateTimeOffset? CompletedDate { get; set; }
        /// <summary>The CustomerComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerComment { get; set; }
#nullable restore
#else
        public string CustomerComment { get; set; }
#endif
        /// <summary>The DisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The PlannedDate property</summary>
        public DateTimeOffset? PlannedDate { get; set; }
        /// <summary>The StatusId property</summary>
        public int? StatusId { get; set; }
        /// <summary>The StatusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusName { get; set; }
#nullable restore
#else
        public string StatusName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MinimalJobNavigationModel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MinimalJobNavigationModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"CompletedDate", n => { CompletedDate = n.GetDateTimeOffsetValue(); } },
                {"CustomerComment", n => { CustomerComment = n.GetStringValue(); } },
                {"DisplayName", n => { DisplayName = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"PlannedDate", n => { PlannedDate = n.GetDateTimeOffsetValue(); } },
                {"StatusId", n => { StatusId = n.GetIntValue(); } },
                {"StatusName", n => { StatusName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("CompletedDate", CompletedDate);
            writer.WriteStringValue("CustomerComment", CustomerComment);
            writer.WriteStringValue("DisplayName", DisplayName);
            writer.WriteIntValue("Id", Id);
            writer.WriteDateTimeOffsetValue("PlannedDate", PlannedDate);
            writer.WriteIntValue("StatusId", StatusId);
            writer.WriteStringValue("StatusName", StatusName);
        }
    }
}
