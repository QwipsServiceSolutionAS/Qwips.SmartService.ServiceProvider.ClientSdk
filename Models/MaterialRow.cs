// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class MaterialRow : IParsable {
        /// <summary>The ArticleCount property</summary>
        public double? ArticleCount { get; set; }
        /// <summary>The ArticleDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ArticleDescription { get; set; }
#nullable restore
#else
        public string ArticleDescription { get; set; }
#endif
        /// <summary>The ArticleNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ArticleNumber { get; set; }
#nullable restore
#else
        public string ArticleNumber { get; set; }
#endif
        /// <summary>The ArticlePrice property</summary>
        public double? ArticlePrice { get; set; }
        /// <summary>The ArticlePriceIn property</summary>
        public double? ArticlePriceIn { get; set; }
        /// <summary>The ArticlePriceOut property</summary>
        public double? ArticlePriceOut { get; set; }
        /// <summary>The Discount property</summary>
        public double? Discount { get; set; }
        /// <summary>The EmailNotification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailNotification { get; set; }
#nullable restore
#else
        public string EmailNotification { get; set; }
#endif
        /// <summary>The EmploymentId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmploymentId { get; set; }
#nullable restore
#else
        public string EmploymentId { get; set; }
#endif
        /// <summary>The EmploymentName property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmploymentName { get; set; }
#nullable restore
#else
        public string EmploymentName { get; set; }
#endif
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The Latitude property</summary>
        public double? Latitude { get; set; }
        /// <summary>The Longitude property</summary>
        public double? Longitude { get; set; }
        /// <summary>The OrderId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderId { get; set; }
#nullable restore
#else
        public string OrderId { get; set; }
#endif
        /// <summary>The TotalAmountExclVat property</summary>
        public double? TotalAmountExclVat { get; set; }
        /// <summary>The TotalDiscount property</summary>
        public double? TotalDiscount { get; set; }
        /// <summary>The WareHouseId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WareHouseId { get; set; }
#nullable restore
#else
        public string WareHouseId { get; set; }
#endif
        /// <summary>The WareHouseLocation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WareHouseLocation { get; set; }
#nullable restore
#else
        public string WareHouseLocation { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MaterialRow CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MaterialRow();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ArticleCount", n => { ArticleCount = n.GetDoubleValue(); } },
                {"ArticleDescription", n => { ArticleDescription = n.GetStringValue(); } },
                {"ArticleNumber", n => { ArticleNumber = n.GetStringValue(); } },
                {"ArticlePrice", n => { ArticlePrice = n.GetDoubleValue(); } },
                {"ArticlePriceIn", n => { ArticlePriceIn = n.GetDoubleValue(); } },
                {"ArticlePriceOut", n => { ArticlePriceOut = n.GetDoubleValue(); } },
                {"Discount", n => { Discount = n.GetDoubleValue(); } },
                {"EmailNotification", n => { EmailNotification = n.GetStringValue(); } },
                {"EmploymentId", n => { EmploymentId = n.GetStringValue(); } },
                {"EmploymentName", n => { EmploymentName = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetStringValue(); } },
                {"Latitude", n => { Latitude = n.GetDoubleValue(); } },
                {"Longitude", n => { Longitude = n.GetDoubleValue(); } },
                {"OrderId", n => { OrderId = n.GetStringValue(); } },
                {"TotalAmountExclVat", n => { TotalAmountExclVat = n.GetDoubleValue(); } },
                {"TotalDiscount", n => { TotalDiscount = n.GetDoubleValue(); } },
                {"WareHouseId", n => { WareHouseId = n.GetStringValue(); } },
                {"WareHouseLocation", n => { WareHouseLocation = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("ArticleCount", ArticleCount);
            writer.WriteStringValue("ArticleDescription", ArticleDescription);
            writer.WriteStringValue("ArticleNumber", ArticleNumber);
            writer.WriteDoubleValue("ArticlePrice", ArticlePrice);
            writer.WriteDoubleValue("ArticlePriceIn", ArticlePriceIn);
            writer.WriteDoubleValue("ArticlePriceOut", ArticlePriceOut);
            writer.WriteDoubleValue("Discount", Discount);
            writer.WriteStringValue("EmailNotification", EmailNotification);
            writer.WriteStringValue("EmploymentId", EmploymentId);
            writer.WriteStringValue("EmploymentName", EmploymentName);
            writer.WriteStringValue("Id", Id);
            writer.WriteDoubleValue("Latitude", Latitude);
            writer.WriteDoubleValue("Longitude", Longitude);
            writer.WriteStringValue("OrderId", OrderId);
            writer.WriteDoubleValue("TotalAmountExclVat", TotalAmountExclVat);
            writer.WriteDoubleValue("TotalDiscount", TotalDiscount);
            writer.WriteStringValue("WareHouseId", WareHouseId);
            writer.WriteStringValue("WareHouseLocation", WareHouseLocation);
        }
    }
}
