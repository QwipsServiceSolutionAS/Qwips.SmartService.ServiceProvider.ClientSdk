// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class MachineServiceHistoriesPartDto : IParsable {
        /// <summary>The Article property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ArticleDataModel? Article { get; set; }
#nullable restore
#else
        public ArticleDataModel Article { get; set; }
#endif
        /// <summary>The ArticleDescription property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ArticleDescription { get; set; }
#nullable restore
#else
        public string ArticleDescription { get; set; }
#endif
        /// <summary>The ArticleDiscount property</summary>
        public double? ArticleDiscount { get; set; }
        /// <summary>The ArticleId property</summary>
        public int? ArticleId { get; set; }
        /// <summary>The ArticlePriceOut property</summary>
        public double? ArticlePriceOut { get; set; }
        /// <summary>The ArticleQtyOrdered property</summary>
        public double? ArticleQtyOrdered { get; set; }
        /// <summary>The EmploymentId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmploymentId { get; set; }
#nullable restore
#else
        public string EmploymentId { get; set; }
#endif
        /// <summary>The EmploymentTimeReportDate property</summary>
        public DateTimeOffset? EmploymentTimeReportDate { get; set; }
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The MachineServiceHistoriesId property</summary>
        public int? MachineServiceHistoriesId { get; set; }
        /// <summary>The Total property</summary>
        public double? Total { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MachineServiceHistoriesPartDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MachineServiceHistoriesPartDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Article", n => { Article = n.GetObjectValue<ArticleDataModel>(ArticleDataModel.CreateFromDiscriminatorValue); } },
                {"ArticleDescription", n => { ArticleDescription = n.GetStringValue(); } },
                {"ArticleDiscount", n => { ArticleDiscount = n.GetDoubleValue(); } },
                {"ArticleId", n => { ArticleId = n.GetIntValue(); } },
                {"ArticlePriceOut", n => { ArticlePriceOut = n.GetDoubleValue(); } },
                {"ArticleQtyOrdered", n => { ArticleQtyOrdered = n.GetDoubleValue(); } },
                {"EmploymentId", n => { EmploymentId = n.GetStringValue(); } },
                {"EmploymentTimeReportDate", n => { EmploymentTimeReportDate = n.GetDateTimeOffsetValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"MachineServiceHistoriesId", n => { MachineServiceHistoriesId = n.GetIntValue(); } },
                {"Total", n => { Total = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ArticleDataModel>("Article", Article);
            writer.WriteStringValue("ArticleDescription", ArticleDescription);
            writer.WriteDoubleValue("ArticleDiscount", ArticleDiscount);
            writer.WriteIntValue("ArticleId", ArticleId);
            writer.WriteDoubleValue("ArticlePriceOut", ArticlePriceOut);
            writer.WriteDoubleValue("ArticleQtyOrdered", ArticleQtyOrdered);
            writer.WriteStringValue("EmploymentId", EmploymentId);
            writer.WriteDateTimeOffsetValue("EmploymentTimeReportDate", EmploymentTimeReportDate);
            writer.WriteIntValue("Id", Id);
            writer.WriteIntValue("MachineServiceHistoriesId", MachineServiceHistoriesId);
            writer.WriteDoubleValue("Total", Total);
        }
    }
}
