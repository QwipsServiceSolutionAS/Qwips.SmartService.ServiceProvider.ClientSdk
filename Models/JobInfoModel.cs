// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class JobInfoModel : IParsable {
        /// <summary>The Appointments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<JobAppointmentDataModel>? Appointments { get; set; }
#nullable restore
#else
        public List<JobAppointmentDataModel> Appointments { get; set; }
#endif
        /// <summary>The CreatedDate property</summary>
        public DateTimeOffset? CreatedDate { get; set; }
        /// <summary>The CustomerComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerComment { get; set; }
#nullable restore
#else
        public string CustomerComment { get; set; }
#endif
        /// <summary>The CustomerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerName { get; set; }
#nullable restore
#else
        public string CustomerName { get; set; }
#endif
        /// <summary>The DisplayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The IsClosed property</summary>
        public bool? IsClosed { get; set; }
        /// <summary>The IsMine property</summary>
        public bool? IsMine { get; set; }
        /// <summary>The JobPriority property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JobPriorityDto? JobPriority { get; set; }
#nullable restore
#else
        public JobPriorityDto JobPriority { get; set; }
#endif
        /// <summary>The Jobs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<JobDetailDto>? Jobs { get; set; }
#nullable restore
#else
        public List<JobDetailDto> Jobs { get; set; }
#endif
        /// <summary>The JobTypeId property</summary>
        public int? JobTypeId { get; set; }
        /// <summary>The JobTypeName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JobTypeName { get; set; }
#nullable restore
#else
        public string JobTypeName { get; set; }
#endif
        /// <summary>The OrderId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderId { get; set; }
#nullable restore
#else
        public string OrderId { get; set; }
#endif
        /// <summary>The StatusId property</summary>
        public int? StatusId { get; set; }
        /// <summary>The StatusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusName { get; set; }
#nullable restore
#else
        public string StatusName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JobInfoModel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JobInfoModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Appointments", n => { Appointments = n.GetCollectionOfObjectValues<JobAppointmentDataModel>(JobAppointmentDataModel.CreateFromDiscriminatorValue)?.ToList(); } },
                {"CreatedDate", n => { CreatedDate = n.GetDateTimeOffsetValue(); } },
                {"CustomerComment", n => { CustomerComment = n.GetStringValue(); } },
                {"CustomerName", n => { CustomerName = n.GetStringValue(); } },
                {"DisplayName", n => { DisplayName = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"IsClosed", n => { IsClosed = n.GetBoolValue(); } },
                {"IsMine", n => { IsMine = n.GetBoolValue(); } },
                {"JobPriority", n => { JobPriority = n.GetObjectValue<JobPriorityDto>(JobPriorityDto.CreateFromDiscriminatorValue); } },
                {"Jobs", n => { Jobs = n.GetCollectionOfObjectValues<JobDetailDto>(JobDetailDto.CreateFromDiscriminatorValue)?.ToList(); } },
                {"JobTypeId", n => { JobTypeId = n.GetIntValue(); } },
                {"JobTypeName", n => { JobTypeName = n.GetStringValue(); } },
                {"OrderId", n => { OrderId = n.GetStringValue(); } },
                {"StatusId", n => { StatusId = n.GetIntValue(); } },
                {"StatusName", n => { StatusName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<JobAppointmentDataModel>("Appointments", Appointments);
            writer.WriteDateTimeOffsetValue("CreatedDate", CreatedDate);
            writer.WriteStringValue("CustomerComment", CustomerComment);
            writer.WriteStringValue("CustomerName", CustomerName);
            writer.WriteStringValue("DisplayName", DisplayName);
            writer.WriteIntValue("Id", Id);
            writer.WriteBoolValue("IsClosed", IsClosed);
            writer.WriteBoolValue("IsMine", IsMine);
            writer.WriteObjectValue<JobPriorityDto>("JobPriority", JobPriority);
            writer.WriteCollectionOfObjectValues<JobDetailDto>("Jobs", Jobs);
            writer.WriteIntValue("JobTypeId", JobTypeId);
            writer.WriteStringValue("JobTypeName", JobTypeName);
            writer.WriteStringValue("OrderId", OrderId);
            writer.WriteIntValue("StatusId", StatusId);
            writer.WriteStringValue("StatusName", StatusName);
        }
    }
}
