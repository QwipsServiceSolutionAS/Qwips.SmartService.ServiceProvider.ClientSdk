// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class Assembly : IParsable {
        /// <summary>The CodeBase property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CodeBase { get; private set; }
#nullable restore
#else
        public string CodeBase { get; private set; }
#endif
        /// <summary>The CustomAttributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CustomAttributeData>? CustomAttributes { get; private set; }
#nullable restore
#else
        public List<CustomAttributeData> CustomAttributes { get; private set; }
#endif
        /// <summary>The DefinedTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TypeInfo>? DefinedTypes { get; private set; }
#nullable restore
#else
        public List<TypeInfo> DefinedTypes { get; private set; }
#endif
        /// <summary>The EntryPoint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MethodInfo? EntryPoint { get; set; }
#nullable restore
#else
        public MethodInfo EntryPoint { get; set; }
#endif
        /// <summary>The EscapedCodeBase property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EscapedCodeBase { get; private set; }
#nullable restore
#else
        public string EscapedCodeBase { get; private set; }
#endif
        /// <summary>The ExportedTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TypeObject>? ExportedTypes { get; private set; }
#nullable restore
#else
        public List<TypeObject> ExportedTypes { get; private set; }
#endif
        /// <summary>The FullName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; private set; }
#nullable restore
#else
        public string FullName { get; private set; }
#endif
        /// <summary>The GlobalAssemblyCache property</summary>
        public bool? GlobalAssemblyCache { get; private set; }
        /// <summary>The HostContext property</summary>
        public long? HostContext { get; private set; }
        /// <summary>The ImageRuntimeVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageRuntimeVersion { get; private set; }
#nullable restore
#else
        public string ImageRuntimeVersion { get; private set; }
#endif
        /// <summary>The IsDynamic property</summary>
        public bool? IsDynamic { get; private set; }
        /// <summary>The IsFullyTrusted property</summary>
        public bool? IsFullyTrusted { get; private set; }
        /// <summary>The Location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; private set; }
#nullable restore
#else
        public string Location { get; private set; }
#endif
        /// <summary>The ManifestModule property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Module? ManifestModule { get; set; }
#nullable restore
#else
        public Module ManifestModule { get; set; }
#endif
        /// <summary>The Modules property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Module>? Modules { get; private set; }
#nullable restore
#else
        public List<Module> Modules { get; private set; }
#endif
        /// <summary>The ReflectionOnly property</summary>
        public bool? ReflectionOnly { get; private set; }
        /// <summary>The SecurityRuleSet property</summary>
        public int? SecurityRuleSet { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Assembly CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Assembly();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"CodeBase", n => { CodeBase = n.GetStringValue(); } },
                {"CustomAttributes", n => { CustomAttributes = n.GetCollectionOfObjectValues<CustomAttributeData>(CustomAttributeData.CreateFromDiscriminatorValue)?.ToList(); } },
                {"DefinedTypes", n => { DefinedTypes = n.GetCollectionOfObjectValues<TypeInfo>(TypeInfo.CreateFromDiscriminatorValue)?.ToList(); } },
                {"EntryPoint", n => { EntryPoint = n.GetObjectValue<MethodInfo>(MethodInfo.CreateFromDiscriminatorValue); } },
                {"EscapedCodeBase", n => { EscapedCodeBase = n.GetStringValue(); } },
                {"ExportedTypes", n => { ExportedTypes = n.GetCollectionOfObjectValues<TypeObject>(TypeObject.CreateFromDiscriminatorValue)?.ToList(); } },
                {"FullName", n => { FullName = n.GetStringValue(); } },
                {"GlobalAssemblyCache", n => { GlobalAssemblyCache = n.GetBoolValue(); } },
                {"HostContext", n => { HostContext = n.GetLongValue(); } },
                {"ImageRuntimeVersion", n => { ImageRuntimeVersion = n.GetStringValue(); } },
                {"IsDynamic", n => { IsDynamic = n.GetBoolValue(); } },
                {"IsFullyTrusted", n => { IsFullyTrusted = n.GetBoolValue(); } },
                {"Location", n => { Location = n.GetStringValue(); } },
                {"ManifestModule", n => { ManifestModule = n.GetObjectValue<Module>(Module.CreateFromDiscriminatorValue); } },
                {"Modules", n => { Modules = n.GetCollectionOfObjectValues<Module>(Module.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ReflectionOnly", n => { ReflectionOnly = n.GetBoolValue(); } },
                {"SecurityRuleSet", n => { SecurityRuleSet = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<MethodInfo>("EntryPoint", EntryPoint);
            writer.WriteObjectValue<Module>("ManifestModule", ManifestModule);
            writer.WriteIntValue("SecurityRuleSet", SecurityRuleSet);
        }
    }
}
