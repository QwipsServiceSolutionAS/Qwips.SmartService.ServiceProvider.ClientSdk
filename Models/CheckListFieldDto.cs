// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class CheckListFieldDto : IParsable {
        /// <summary>The AllowComment property</summary>
        public bool? AllowComment { get; set; }
        /// <summary>The CheckListTemplate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CheckListTemplateDto? CheckListTemplate { get; set; }
#nullable restore
#else
        public CheckListTemplateDto CheckListTemplate { get; set; }
#endif
        /// <summary>The CheckListTemplateId property</summary>
        public int? CheckListTemplateId { get; set; }
        /// <summary>The Condition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Condition { get; set; }
#nullable restore
#else
        public string Condition { get; set; }
#endif
        /// <summary>The Deleted property</summary>
        public bool? Deleted { get; set; }
        /// <summary>The Id property</summary>
        public int? Id { get; set; }
        /// <summary>The LastModified property</summary>
        public DateTimeOffset? LastModified { get; set; }
        /// <summary>The ModifiedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModifiedBy { get; set; }
#nullable restore
#else
        public string ModifiedBy { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Section property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Section { get; set; }
#nullable restore
#else
        public string Section { get; set; }
#endif
        /// <summary>The SortOrder property</summary>
        public int? SortOrder { get; set; }
        /// <summary>The Type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CheckListFieldDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CheckListFieldDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AllowComment", n => { AllowComment = n.GetBoolValue(); } },
                {"CheckListTemplate", n => { CheckListTemplate = n.GetObjectValue<CheckListTemplateDto>(CheckListTemplateDto.CreateFromDiscriminatorValue); } },
                {"CheckListTemplateId", n => { CheckListTemplateId = n.GetIntValue(); } },
                {"Condition", n => { Condition = n.GetStringValue(); } },
                {"Deleted", n => { Deleted = n.GetBoolValue(); } },
                {"Id", n => { Id = n.GetIntValue(); } },
                {"LastModified", n => { LastModified = n.GetDateTimeOffsetValue(); } },
                {"ModifiedBy", n => { ModifiedBy = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"Section", n => { Section = n.GetStringValue(); } },
                {"SortOrder", n => { SortOrder = n.GetIntValue(); } },
                {"Type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("AllowComment", AllowComment);
            writer.WriteObjectValue<CheckListTemplateDto>("CheckListTemplate", CheckListTemplate);
            writer.WriteIntValue("CheckListTemplateId", CheckListTemplateId);
            writer.WriteStringValue("Condition", Condition);
            writer.WriteBoolValue("Deleted", Deleted);
            writer.WriteIntValue("Id", Id);
            writer.WriteDateTimeOffsetValue("LastModified", LastModified);
            writer.WriteStringValue("ModifiedBy", ModifiedBy);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("Section", Section);
            writer.WriteIntValue("SortOrder", SortOrder);
            writer.WriteStringValue("Type", Type);
        }
    }
}
