// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Qwips.SmartService.ServiceProvider.ClientSdk.Models {
    public class CreateJobDto : IParsable {
        /// <summary>The ContactPersonId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactPersonId { get; set; }
#nullable restore
#else
        public string ContactPersonId { get; set; }
#endif
        /// <summary>The CustomerDeliveryAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DeliveryAddress? CustomerDeliveryAddress { get; set; }
#nullable restore
#else
        public DeliveryAddress CustomerDeliveryAddress { get; set; }
#endif
        /// <summary>The CustomerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerId { get; set; }
#nullable restore
#else
        public string CustomerId { get; set; }
#endif
        /// <summary>The EstimatedTime property</summary>
        public double? EstimatedTime { get; set; }
        /// <summary>The FirstLineComment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstLineComment { get; set; }
#nullable restore
#else
        public string FirstLineComment { get; set; }
#endif
        /// <summary>The InvoiceReference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceReference { get; set; }
#nullable restore
#else
        public string InvoiceReference { get; set; }
#endif
        /// <summary>The JobPriorityId property</summary>
        public int? JobPriorityId { get; set; }
        /// <summary>The JobStatusId property</summary>
        public int? JobStatusId { get; set; }
        /// <summary>The JobSubStatusId property</summary>
        public int? JobSubStatusId { get; set; }
        /// <summary>The JobTypeId property</summary>
        public int? JobTypeId { get; set; }
        /// <summary>The Machines property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CreateChildJobMachineDto>? Machines { get; set; }
#nullable restore
#else
        public List<CreateChildJobMachineDto> Machines { get; set; }
#endif
        /// <summary>The NoInvoice property</summary>
        public bool? NoInvoice { get; set; }
        /// <summary>The RepairPlaceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepairPlaceId { get; set; }
#nullable restore
#else
        public string RepairPlaceId { get; set; }
#endif
        /// <summary>The WarrentyTypeId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WarrentyTypeId { get; set; }
#nullable restore
#else
        public string WarrentyTypeId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateJobDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateJobDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ContactPersonId", n => { ContactPersonId = n.GetStringValue(); } },
                {"CustomerDeliveryAddress", n => { CustomerDeliveryAddress = n.GetObjectValue<DeliveryAddress>(DeliveryAddress.CreateFromDiscriminatorValue); } },
                {"CustomerId", n => { CustomerId = n.GetStringValue(); } },
                {"EstimatedTime", n => { EstimatedTime = n.GetDoubleValue(); } },
                {"FirstLineComment", n => { FirstLineComment = n.GetStringValue(); } },
                {"InvoiceReference", n => { InvoiceReference = n.GetStringValue(); } },
                {"JobPriorityId", n => { JobPriorityId = n.GetIntValue(); } },
                {"JobStatusId", n => { JobStatusId = n.GetIntValue(); } },
                {"JobSubStatusId", n => { JobSubStatusId = n.GetIntValue(); } },
                {"JobTypeId", n => { JobTypeId = n.GetIntValue(); } },
                {"Machines", n => { Machines = n.GetCollectionOfObjectValues<CreateChildJobMachineDto>(CreateChildJobMachineDto.CreateFromDiscriminatorValue)?.ToList(); } },
                {"NoInvoice", n => { NoInvoice = n.GetBoolValue(); } },
                {"RepairPlaceId", n => { RepairPlaceId = n.GetStringValue(); } },
                {"WarrentyTypeId", n => { WarrentyTypeId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ContactPersonId", ContactPersonId);
            writer.WriteObjectValue<DeliveryAddress>("CustomerDeliveryAddress", CustomerDeliveryAddress);
            writer.WriteStringValue("CustomerId", CustomerId);
            writer.WriteDoubleValue("EstimatedTime", EstimatedTime);
            writer.WriteStringValue("FirstLineComment", FirstLineComment);
            writer.WriteStringValue("InvoiceReference", InvoiceReference);
            writer.WriteIntValue("JobPriorityId", JobPriorityId);
            writer.WriteIntValue("JobStatusId", JobStatusId);
            writer.WriteIntValue("JobSubStatusId", JobSubStatusId);
            writer.WriteIntValue("JobTypeId", JobTypeId);
            writer.WriteCollectionOfObjectValues<CreateChildJobMachineDto>("Machines", Machines);
            writer.WriteBoolValue("NoInvoice", NoInvoice);
            writer.WriteStringValue("RepairPlaceId", RepairPlaceId);
            writer.WriteStringValue("WarrentyTypeId", WarrentyTypeId);
        }
    }
}
